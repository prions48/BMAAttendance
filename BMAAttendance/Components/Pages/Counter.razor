@page "/email"
@using BMAAttendance.Data.Email
@inject EmailService emailService
@inject ISnackbar Snackbar
<PageTitle>Email</PageTitle>

<h1>Email</h1>

<MudStack>
    <MudTextField @bind-Value="MsgName" Label="Your Name" />
    <MudTextField @bind-Value="MsgEmail" Label="Email Address" />
    <MudTextField @bind-Value="MsgSubject" Label="Subject" />
    <MudTextField @bind-Value="MsgBody" Label="Body of Message" Lines="4" />
</MudStack>
@if (Sending)
{
    <MudProgressCircular Indeterminate />
}
else
{
    <MudButton Variant="Variant.Filled" Color="Color.Info" Disabled="string.IsNullOrEmpty(MsgName) || string.IsNullOrEmpty(MsgEmail) 
    || string.IsNullOrEmpty(MsgSubject) || string.IsNullOrEmpty(MsgBody)" OnClick="SendMessage">Ask the Master!</MudButton>
}
<br />


@code {
    private string MsgName, MsgEmail, MsgSubject, MsgBody;
    private bool Sending = false;
    private async Task SendMessage()
    {
        Sending = true;
        try
        {
            string result = await emailService.SendEmail(KeyChain.OwnerEmail, $"Contact Form RE: {MsgSubject}", $"Message from {MsgName}, Email {MsgEmail}: <br />{MsgBody}");
            Snackbar.Add(result, result == "Succeeded" ? Severity.Success : Severity.Error);
            MsgName = "";
            MsgEmail = "";
            MsgSubject = "";
            MsgBody = "";
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            Sending = false;
            StateHasChanged();
        }
    }
}
