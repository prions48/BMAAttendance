@page "/student/{studentid}"
@inject BMAService bmaService
@using QRCoder
@using BMAAttendance.Components

<AuthorizeView>
    <Authorized>
        @if (User == null)
        {
            <MudText Typo="Typo.h6">Please contact tech support to repair your user configuration.</MudText>
        }
        else if (Student == null)
        {
            <MudText Typo="Typo.h6">Student not found.</MudText>
        }
        else if (!User.DashboardAccess && !User.Students.Any(e => e.StudentID == Student.ID))
        {
            <MudText Typo="Typo.h6">You do not have access to this resource.</MudText>
        }
        else
        {
            <MudGrid>
                <MudItem xs="12" sm="12" md="6" lg="4" xl="4">
                    <MudCard Elevation="1" Outlined>
                        <MudCardHeader>
                            @Student?.StudentName
                            <MudSpacer />
                            @if (User.DashboardAccess || User.Students.Any(e => e.StudentID == Student!.ID && e.EditInfo))
                            {
                                @if (Editing)
                                {
                                    <MudIconButton Color="Color.Success" Icon="@Icons.Material.TwoTone.Save" OnClick="Save" 
                                        Disabled="string.IsNullOrEmpty(Student?.StudentName) || string.IsNullOrEmpty(Student.EmailAddress)" />
                                }
                                else
                                {
                                    <MudIconButton Color="Color.Info" Icon="@Icons.Material.TwoTone.Edit" OnClick="Edit" />
                                }
                            }
                        </MudCardHeader>
                        <MudCardContent>
                            @if (Student != null)
                            {
                                <MudSimpleTable Striped Bordered>
                                    <thead>
                                        <tr>
                                            <th>Data</th>
                                            <th>Value</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>Name</td>
                                            <td>
                                                @if (Editing)
                                                {
                                                    <MudStack Row>
                                                        <MudTextField @bind-Value="Student.FirstName" Label="First Name" />
                                                        <MudTextField @bind-Value="Student.LastName" Label="Last Name" />
                                                    </MudStack>
                                                }
                                                else
                                                {
                                                    @Student.StudentName
                                                }
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Email</td>
                                            <td>
                                                @if (Editing)
                                                {
                                                    <MudTextField @bind-Value="Student.EmailAddress" />
                                                }
                                                else
                                                {
                                                    @Student.EmailAddress
                                                }
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Phone</td>
                                            <td>
                                                @if (Editing)
                                                {
                                                    <MudTextField @bind-Value="Student.PhoneNumber" />
                                                }
                                                else
                                                {
                                                    @Student.PhoneNumber
                                                }
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Gup #</td>
                                            <td>
                                                @if (Editing)
                                                {
                                                    <MudTextField @bind-Value="Student.GupNumber" />
                                                }
                                                else
                                                {
                                                    @Student.GupNumber
                                                }
                                            </td>
                                        </tr>
                                        @*Taking out QR codes for now*@
                                        @*<tr>
                                            <td>QR Code</td>
                                            <td>
                                                @if (ViewQR)
                                                {
                                                    <img src="@QRCodeImg" width="150" />
                                                }
                                                else
                                                {
                                                    <MudIconButton Icon="@Icons.Material.TwoTone.RemoveRedEye" Color="Color.Info" OnClick="() => ViewQR = true" />
                                                }
                                            </td>
                                        </tr>*@
                                    </tbody>
                                </MudSimpleTable>
                            }
                            else
                            {
                                <MudText Typo="Typo.h6">Student not found.</MudText>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="12" md="6" lg="4" xl="4">
                    <MudExpansionPanels>
                        <MudExpansionPanel Text="@($"Rank: {Ranks.FirstOrDefault(e => e.ID==Student.RankID)?.RankName}")">
                            <MudSimpleTable Striped Bordered>
                                <thead>
                                    <tr>
                                        <th>Rank</th>
                                        <th>Date Promoted</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (User.DashboardAccess)
                                    {
                                        <tr>
                                            <td>
                                                <MudSelect @bind-Value="PromoteRank" Clearable T="BMARank">
                                                    @foreach (BMARank rank in Ranks.Where((e => e.OrderNumber > (Ranks.FirstOrDefault(f => f.ID == Student.RankID)?.OrderNumber ?? 0))).OrderBy(e => e.OrderNumber))
                                                    {
                                                        <MudSelectItem Value="rank">@rank.RankName</MudSelectItem>                                            
                                                    }
                                                </MudSelect>
                                            </td>
                                            <td>
                                                <MudDatePicker @bind-Date="PromoteDate" Label="Date Awarded" MinDate="Student.DateAwarded" />
                                            </td>
                                            <td>
                                                <MudButton OnClick="AwardRank" Variant="Variant.Filled" Color="Color.Info"
                                                Disabled="PromoteDate == null || PromoteRank == null">Award</MudButton>
                                            </td>
                                        </tr>
                                    }
                                    @foreach (BMAStudentRank rank in StudentRanks.OrderByDescending(e => e.DateAwarded))
                                    {
                                        <tr>
                                            <td>
                                                <MudStack Row>
                                                    @Ranks.FirstOrDefault(e => e.ID == rank.RankID)?.RankName
                                                    <BeltColors Rank="Ranks.FirstOrDefault(e => e.ID == rank.RankID)" Size="BeltColors.BeltSize.small" />
                                                </MudStack>

                                            </td>
                                            <td>@rank.DateAwarded.ToString("MM/dd/yy")</td>
                                            <td>
                                                <MudIconButton Color="Color.Error" Icon="@Icons.Material.TwoTone.DeleteForever" OnClick="() => DeleteStudentRank(rank)" Disabled="rank.RankID != Student.RankID" />
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </MudSimpleTable>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </MudItem>
                <MudItem xs="12" sm="12" md="6" lg="4" xl="4">
                    <MudExpansionPanels>
                        <MudExpansionPanel>
                            <TitleContent>
                                <MudStack Row>
                                    <MudText>Attendance</MudText>
                                    <MudSpacer />
                                    <MudText>Count: @Student.Attends.Count(e => e.AttendDate >= Student.DateAwarded || !OnlyRecent)</MudText>
                                </MudStack>
                            </TitleContent>
                            <ChildContent>
                                <MudStack Row AlignItems="AlignItems.Center">
                                    <MudToggleIconButton @bind-Toggled="OnlyRecent" Icon="@Icons.Material.TwoTone.AllInclusive" Color="Color.Primary" ToggledIcon="@Icons.Material.TwoTone.CalendarMonth" ToggledColor="Color.Info"  />
                                    <MudText>@(OnlyRecent ? "Only Since Last Promotion" : "All Attendances")</MudText>
                                </MudStack>
                                <MudSimpleTable Striped Bordered Dense>
                                    <thead>
                                        <tr>
                                            <th>Date</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (User.DashboardAccess)
                                        {
                                            <tr>
                                                <td>
                                                    <MudDatePicker @bind-Date="SelectedDate" Clearable Label="Log New" />
                                                </td>
                                                <td>
                                                    <MudIconButton Icon="@Icons.Material.TwoTone.Save" OnClick="SaveDate" Color="Color.Success" Disabled="SelectedDate == null || Student.Attends.Any(e => e.AttendDate == SelectedDate)" />
                                                </td>
                                            </tr>
                                        }
                                        @foreach (BMAStudentAttend attend in Student.Attends.Where(e => e.AttendDate >= Student.DateAwarded || !OnlyRecent).OrderByDescending(e => e.AttendDate))
                                        {
                                            <tr>
                                                <td>@attend.AttendDate.ToString("MM/dd/yy")</td>
                                                <td>
                                                    <MudIconButton OnClick="() => DeleteDate(attend)" Color="Color.Error" Icon="@Icons.Material.TwoTone.DeleteForever" />
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </MudSimpleTable>
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </MudItem>
            </MudGrid>
        }
    </Authorized>
    <NotAuthorized>
        <MudText Typo="Typo.h6">You must log in to view this content.</MudText>
    </NotAuthorized>
</AuthorizeView>


@code {
    [CascadingParameter] public BMAUser? User { get; set; }
    [Parameter] public string? studentid { get; set; }
    private BMAStudent? Student { get; set; }
    private List<BMARank> Ranks { get; set; } = [];
    private List<BMAStudentRank> StudentRanks { get; set; } = [];
    private string? QRCodeImg { get; set; } = null;
    private bool ViewQR = false;
    protected override void OnInitialized()
    {
        Ranks = bmaService.GetRanks();
    }
    protected override void OnParametersSet()
    {
        if (Guid.TryParse(studentid, out Guid StudentID) && (Student == null || Student.ID != StudentID))
        {
            Student = bmaService.GetStudentByID(StudentID);
            if (Student != null)
            {
                StudentRanks = bmaService.GetStudentRanksByStudent(StudentID);
                QRCodeImg = null;
                QRCodeGenerator qrGenerator = new QRCodeGenerator();
                QRCodeData qrData = qrGenerator.CreateQrCode($"https://berringerma.azurewebsites.net/student/{Student.ID}",QRCodeGenerator.ECCLevel.Q);
                using (BitmapByteQRCode qrCode = new BitmapByteQRCode(qrData))
                {
                    byte[] qrImg = qrCode.GetGraphic(20);
                    string base64 = Convert.ToBase64String(qrImg);
                    QRCodeImg = string.Format("data:image/png;base64,{0}", base64);
                }
            }
        }
    }
    private DateTime? SelectedDate { get; set; } = DateTime.Today;
    private void SaveDate()
    {
        if (Student == null || SelectedDate == null)
            return;
        BMAStudentAttend attend = new BMAStudentAttend(){
            StudentID = Student.ID,
            AttendDate=SelectedDate.Value,
            LoggedDate = DateTime.Now,
            LoggedBy = User!.UserID
        };
        bmaService.CreateAttend(attend);
        Student.Attends.Add(attend);
    }
    private void DeleteDate(BMAStudentAttend attend)
    {
        bmaService.DeleteAttend(attend);
        Student!.Attends.Remove(attend);
    }
    private BMARank? PromoteRank { get; set; }
    private DateTime? PromoteDate { get; set; } = DateTime.Today;
    private async Task AwardRank()
    {
        if (PromoteRank == null || PromoteDate == null || Student == null)
            return;
        BMAStudentRank studentrank = new BMAStudentRank()
        {
            StudentID = Student.ID,
            DateAwarded = PromoteDate.Value,
            RankID = PromoteRank.ID,
            Rank = PromoteRank
        };
        bmaService.CreateStudentRank(studentrank);
        StudentRanks.Add(studentrank);
        Student.RankID = PromoteRank.ID;
        Student.DateAwarded = PromoteDate.Value;
        bmaService.UpdateStudent(Student);
        PromoteDate = null;
        PromoteRank = null;
        List<BMAStudentRank> ranks = StudentRanks;
        StudentRanks = [];
        StateHasChanged();
        await Task.Delay(1);
        foreach (BMAStudentRank rank in ranks)
            StudentRanks.Add(rank);
    }
    private async Task DeleteStudentRank(BMAStudentRank studentrank)
    {
        if (Student == null)
            return;
        bmaService.DeleteStudentRank(studentrank);
        StudentRanks.Remove(studentrank);
        Student.RankID = null;
        Student.DateAwarded = null;
        int maxrank = -1; //going backwards in time is actual work apparently
        foreach (BMAStudentRank sr in StudentRanks)
        {
            BMARank? rank = Ranks.FirstOrDefault(e => e.ID == sr.RankID);
            if ((rank?.OrderNumber ?? -1) > maxrank)
                maxrank = rank!.OrderNumber;
        }
        if (maxrank > -1)
        {
            BMARank? toprank = Ranks.FirstOrDefault(e => e.OrderNumber == maxrank);
            if (toprank != null)
            {
                BMAStudentRank? topsr = StudentRanks.FirstOrDefault(e => e.RankID == toprank.ID);
                if (topsr != null)
                {
                    Student.RankID = topsr.RankID;
                    Student.DateAwarded = topsr.DateAwarded;
                }
            }
        }
        bmaService.UpdateStudent(Student);
        List<BMAStudentRank> ranks = StudentRanks;
        StudentRanks = [];
        StateHasChanged();
        await Task.Delay(1);
        foreach (BMAStudentRank rank in ranks)
            StudentRanks.Add(rank);
    }
    private bool OnlyRecent = true;
    private bool Editing = false;
    private void Edit()
    {
        Editing = true;
    }
    private void Save()
    {
        bmaService.UpdateStudent(Student);
        Editing = false;
    }
}